/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package traffic_simulation.environment

import java.util.UUID
import java.time.LocalDateTime
import java.util.Timer
import java.util.TimerTask
import traffic_simulation.time.TimeManager
import java.util.TreeMap
import org.eclipse.xtend.lib.annotations.Accessors
import java.util.ArrayList

/**
 * Situated environment.  
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class Environment {
	var agentsToSpawn : int
	var timer : Timer = new Timer()
	// Bodies
	@Accessors
	var bodyList : TreeMap<UUID, classicDriverBody>
	@Accessors
	var priorityVehicle : priorityVehicleBody
	@Accessors
	var map : Map

	@Accessors
	var trafficlight_lst : ArrayList<trafficLight>
	
	
	new() {
		bodyList = new TreeMap<UUID, classicDriverBody>
		priorityVehicle = new priorityVehicleBody()
		map = new Map(1600, 900)
		trafficlight_lst = new ArrayList<trafficLight>
		addTrafficlight(3, "23", true)
		addTrafficlight(5, "45", true)
		addTrafficlight(13, "1213", true)
		addTrafficlight(15, "1415", true)
		addTrafficlight(9, "89", false)
		addTrafficlight(19, "1819", false)
		
		timer.scheduleAtFixedRate(new TimerTask(){
	
		def run {
			//throw new UnsupportedOperationException("TODO: auto-generated method stub")
			for (var i = 0; i<trafficlight_lst.size;i++){
				
				if (trafficlight_lst.get(i).isGreen) {
						trafficlight_lst.get(i).turnRed
				} else {
						trafficlight_lst.get(i).turnGreen
				}
				
			}
		}
	
		}, 8000,8000)
		
	}
	def Update() {
		//println(LocalDateTime.now())
		var a = bodyList.values
		//println(a.get(0).c)
		for(entry : bodyList.entrySet()){
			//println(bodyList.get(entry.getKey()).speed)
			bodyList.get(entry.getKey()).accelerate(0.5)
			if (bodyList.get(entry.getKey()).speed == 0) {
				
				//println(bodyList.get(entry.getKey()).perception.res)
			}
			//println(bodyList.get(entry.getKey()).c)
			}
	}
	
	def addTrafficlight(idNode : int,keyEdge : String, state : boolean){
		var n = map.getG.getListNodes.get(idNode)
		var e = map.getG.dict_Edges.get(keyEdge)
		var Tf = new trafficLight(n.coord.getX(),n.coord.getY(),state)
		e.haveLight = true
		e.light = Tf
		trafficlight_lst.add(Tf)
	}
	
	def initEnvironment(agents:int){
		agentsToSpawn = agents
		var i = 0 
		var currentV: classicDriverBody
		while (i < agentsToSpawn - 1){
			currentV = new classicDriverBody(this.map)
			bodyList.put(currentV.ID,currentV)	
			i++
		}
	}
}