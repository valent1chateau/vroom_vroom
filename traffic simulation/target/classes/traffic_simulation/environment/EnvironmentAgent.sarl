/* 
 * $Id$
 * 
 * Copyright (c) 2014-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package traffic_simulation.environment

import traffic_simulation.^agent.*
import traffic_simulation.time.TimePercept
import traffic_simulation.environment.*
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.lang.core.Address
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import io.sarl.core.OpenEventSpace
import io.sarl.core.Logging
import io.sarl.core.AgentSpawned
import java.util.ArrayList
import java.util.TreeMap

/*  
 * This agent is managing the physic space.
 */
agent EnvironmentAgent {
	uses  Lifecycle, DefaultContextInteractions, Logging
	
	var environment : Environment
	
	var spawnedReceived : AtomicInteger = new AtomicInteger(0)
			
	on Initialize {
		var environment = new Environment()
		environment.initEnvironment(10);
		for(entry : environment.bodyList.entrySet()){
			classicDriver.spawnInContextWithID(entry.getKey(),defaultContext)
		}
		spawn(typeof(priorityDriver))
	}

	on AgentSpawned {
		var v : int = spawnedReceived.incrementAndGet
		if (v == 2) {
			emit(new light("green"))
			killMe
		}
	}
	
	
	
	/*def startLoop {
		//Compute perceptions
	}
	
	def endLoop {
		startLoop();
	}*/
	
//	on Influence { }
// on Perception { }
	
}
