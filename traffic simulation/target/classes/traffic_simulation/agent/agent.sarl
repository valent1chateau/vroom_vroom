/* 
 * $Id$
 * 
 * Copyright (c) 2014-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package traffic_simulation.^agent

import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.List
import java.util.UUID
import io.sarl.core.DefaultContextInteractions

import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import io.sarl.core.AgentSpawned

import java.util.concurrent.atomic.AtomicInteger
import traffic_simulation.environment.Perceptions
import traffic_simulation.environment.suicide
import traffic_simulation.util.Tools
import traffic_simulation.environment.Vehicle

//import traffic_simulation.environment.AbstractEnvironment
event light {
	var l : String

	new (x : String) {
		l = x
	}
}

event influence {
	var acc : double
	var idt : UUID

	new(a : double, id : UUID) {
		acc = a
		idt = id
	}
}

agent classicDriver {
	var tool = new Tools
	var So : double = 1.5
	var T : double = 1.5
	var b : double = 1.67
	var kill : boolean = false

	uses  Lifecycle, DefaultContextInteractions, Logging

	on Initialize {
		loggingName = "classicDriver"
			// info("I'm starting")
		// info("my classicDriver id :" + ID)
	}
	
	on suicide{
		killMe
	}
	
	on Perceptions{
		// info(occurrence.value)
		// info("ok")
		var p = occurrence.p_value
		var etat = occurrence.state
		var dim_car = occurrence.dim
		var coord_car = occurrence.loc
		var isRed = occurrence.isRedView
		var distWithRedLight = occurrence.distwithLight

		var dist_min : double = -1.0
		var carInFront : Vehicle
		var a : double

		if (p.isEmpty != true) {
			// println(p)
			for (var i = 0; i < p.size(); i++) {
				var distBetweenCar = tool.distance_vehicle2(coord_car, p.get(i), dim_car)
				if (i == 0) {
					dist_min = distBetweenCar
					carInFront = p.get(i)
				} else {
					if (distBetweenCar < dist_min) {
						dist_min = distBetweenCar
						carInFront = p.get(i)
					}
				}
			}

			if (isRed) {
				if (distWithRedLight < dist_min) {
					if (distWithRedLight > 5 && etat.get(1) == 0) {
						a = tool.accelerationFree(etat.get(2), etat.get(1), etat.get(0))
					} else {
						a = tool.accelerationInt(etat.get(2), etat.get(1), b, distWithRedLight, 1, etat.get(1), T)
					}

				} else {
					if (dist_min > 5 && etat.get(1) == 0) {
						a = tool.accelerationFree(etat.get(2), etat.get(1), etat.get(0))
					} else {
						a = tool.accelerationInt(etat.get(2), etat.get(1), b, dist_min, 1, etat.get(1), T)
					}
				}
			} else {
				if (dist_min > 5 && etat.get(1) == 0) {
					a = tool.accelerationFree(etat.get(2), etat.get(1), etat.get(0))
				} else {
					a = tool.accelerationInt(etat.get(2), etat.get(1), b, dist_min, 1, etat.get(1), T)
				}
			}
			//println(etat.get(1) - carInFront.speed)
			
			
			
			emit(new influence(a, ID))
			
			
			// println("q")
			// println(a)

		/* if (a < -1000) {
		 * println(
		 * tool.accelerationInt(etat.get(2), etat.get(1), b, dist_min, So, etat.get(1) - carInFront.speed, T))
		 * println(a)
		 * println(etat.get(2))
		 * println(etat.get(1))
		 * println(dist_min)
		 * println(etat.get(1) - carInFront.speed)
		 * }
		 */
			
				// println("a")
		} else {
			if (isRed) {
				if (distWithRedLight > 5 && etat.get(1) == 0) {
					a = tool.accelerationFree(etat.get(2), etat.get(1), etat.get(0))
				} else {
					a = tool.accelerationInt(etat.get(2), etat.get(1), b, distWithRedLight, 1, etat.get(1), T)
				}
			} else {
				a = tool.accelerationFree(etat.get(2), etat.get(1), etat.get(0))
			}

			
			emit(new influence(a, ID))
			
			
		  }
		 
		/* a = tool.accelerationFree(etat.get(2), etat.get(1), etat.get(0))
	 * emit(new influence(a, ID))
	 */
	}

	on light {
		if (occurrence.l == "green") {
			info("yes it's " + occurrence.l)
		} else {
			info("oh no it's " + occurrence.l)
		}
		// killMe
	}
}

agent priorityDriver {

	uses Lifecycle, DefaultContextInteractions, Logging

	on Initialize {
		loggingName = "priorityDriver"
		info("I'm starting")
		info("my priorityDriver id :" + ID)
	}

	on light {
		if (occurrence.l == "green") {
			info("nice it's " + occurrence.l)
		} else {
			info(" but I have the priority!")
		}
		killMe
	}
}
