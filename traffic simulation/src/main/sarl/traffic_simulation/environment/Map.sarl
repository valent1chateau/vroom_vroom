package traffic_simulation.environment

import java.util.*;
import org.eclipse.xtend.lib.annotations.Accessors

class Map {

	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var G : Graph

	var l : int //longueur de la map
	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var w : int	//largeur de la map

	new(length : int, width : int) {
		l = length
		w = width
		//coordonnées X et Y des noeuds de la map
		var coord : double[] = #[0.0,0.4 * w,0.4 * l,0.4 * w,0.0,0.5 * w,0.4 * l,0.5 * w,
			0.0,0.6 * w,0.4 * l,0.6 * w,0.45 * l,w,0.45 * l,0.65 * w,
			0.55 * l,w,0.55 * l,0.65 * w,l,0.6 * w,0.6 * l,0.6 * w,
			l,0.5 * w,0.6 * l,0.5 * w,l,0.4 * w,0.6 * l,0.4 * w,
			0.55 * l,0.0,0.55 * l,0.35 * w,0.45 * l,0.0,0.45 * l,0.35 * w
		]

		var LN : ArrayList<Node> = new ArrayList<Node>
		var Lst_A : ArrayList<ArrayList<Node>> = new ArrayList<ArrayList<Node>> //création de la liste d'adjacence

		var id : int = 0
		//ajout des nodes dans la liste d'adjacence
		for (var i = 0; i < coord.size(); i = i + 2) {
			LN.add(new Node(id, coord.get(i), coord.get(i + 1)))
			id += 1
		}
		for (var k = 0; k < LN.size; k++) {
			var a : ArrayList<Node> = new ArrayList<Node>
			a.add(LN.get(k))
			Lst_A.add(a)
		}
		for (var j = 0; j < LN.size(); j = j + 2) {
			var N1 : Node = LN.get(j)
			var N2 : Node = LN.get(j + 1)
			if (j < 6 || (j > 9 && j < 16)) {
				N1.statut = "y"
				N2.statut = "y"

			} else {
				N1.statut = "x"
				N2.statut = "x"
			}

			if (j == 0 || j == 10 || j == 6 || j == 16) {
				
				Lst_A.get(j + 1).add(N1)
			} else {
				Lst_A.get(j).add(N2)
			}
		}
		//ajout des nodes restant dans la liste d'adjacence
		Lst_A.get(3).add(LN.get(17))

		Lst_A.get(5).add(LN.get(7))
		Lst_A.get(5).add(LN.get(11))

		Lst_A.get(9).add(LN.get(1))
		Lst_A.get(9).add(LN.get(11))
		Lst_A.get(9).add(LN.get(17))

		Lst_A.get(13).add(LN.get(7))

		Lst_A.get(15).add(LN.get(1))
		Lst_A.get(15).add(LN.get(17))

		Lst_A.get(19).add(LN.get(1))
		Lst_A.get(19).add(LN.get(7))
		Lst_A.get(19).add(LN.get(11))

		G = new Graph(LN, Lst_A)
		G.LstAdj_To_Graph() //génération du graphe
	}
	
	def poly() : ArrayList<Edge>{
		return G.getListEdge()
	}	
	
}


