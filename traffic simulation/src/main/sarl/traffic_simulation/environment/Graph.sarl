package traffic_simulation.environment

import java.awt.geom.Point2D
import traffic_simulation.util.Tools
import java.util.*;
import org.eclipse.xtend.lib.annotations.Accessors
import java.lang.Math.*

class Graph {
	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var nbNodes : int	//nombre de noeuds

	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var ListEdge : ArrayList<Edge>	//Liste des edges

	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var ListNodes : ArrayList<Node>		//Liste des Nodes
	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var Lst_Adj : ArrayList<ArrayList<Node>>	//liste d'adjacence du graphe
	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var dict_Edges : Map<String, Edge>		//dictionnaire des edges classés selon une clé

	var tool = new Tools				//outils des fonctions mathématiques pour calculer les courbes de Béziers et les distances

	new() {
	}

	new(ListN : ArrayList<Node>, Lst_A : ArrayList<ArrayList<Node>>) {
		//initialisation des paramètres 
		ListNodes = ListN
		Lst_Adj = Lst_A
		nbNodes = ListNodes.size()
		ListEdge = new ArrayList()
		dict_Edges = new Hashtable<String, Edge>
	}
	
	def LstAdj_To_Graph() {//méthode créant le graphe à partir de la liste d'adjacence
		var idt : int
		var nbP : int
		var pas : double
		nbP = 200
		idt = 0
		for (var i = 0; i < Lst_Adj.size(); i++) {
			if (Lst_Adj.get(i).size != 1) {
				for (var j = 1; j < Lst_Adj.get(i).size(); j++) {
					var key : String
					var E : Edge
					var Nin : Node = ListNodes.get(i)
					var Nout : Node = Lst_Adj.get(i).get(j)

					Nin.neighboors.add(Nout)
					key = String.valueOf(Nin.id) + String.valueOf(Nout.id)
					E = new Edge(idt, Nin, Nout)
					var points : double[] = newDoubleArrayOfSize(2 * (nbP + 1))
					var tour : int = 1

					if (Nin.coord.getY() == Nout.coord.getY()) {

						pas = (Nout.coord.getX() - Nin.coord.getX() ) / nbP

						points.set(0, Nin.coord.getX())
						points.set(1, Nin.coord.getY())

						points.set(2 * nbP, Nout.coord.getX())
						points.set(2 * nbP + 1, Nout.coord.getY())

						for (var t = 2; t < 2 * nbP; t = t + 2) {
							points.set(t, Nin.coord.getX() + pas * tour)
							points.set(t + 1, Nin.coord.getY())
							tour = tour + 1
						}
						//calcul de la distance de l'edge
						E.weight = Math.sqrt((Nout.coord.getX() - Nin.coord.getX()) ** 2 +
							((Nout.coord.getY() - Nin.coord.getY()) ** 2 ))

					} else if (Nin.coord.getX() == Nout.coord.getX()) {

						pas = ( Nout.coord.getY() - Nin.coord.getY()) / nbP
						points.set(0, Nin.coord.getX())
						points.set(1, Nin.coord.getY())

						points.set(2 * nbP, Nout.coord.getX())
						points.set(2 * nbP + 1, Nout.coord.getY())

						for (var v = 2; v < 2 * nbP; v = v + 2) {
							points.set(v, Nin.coord.getX())
							points.set(v + 1, Nin.coord.getY() + pas * tour)
							tour = tour + 1
						}
						E.weight = Math.sqrt((Nout.coord.getX() - Nin.coord.getX()) ** 2 +
							((Nout.coord.getY() - Nin.coord.getY()) ** 2 ))
					} else {

						tour = 0
						var PC : Point2D
						PC = new Point2D.Double
						if (Nin.statut == "x") {
							PC.setLocation(Nin.coord.getX(), Nout.coord.getY())
						} else {
							PC.setLocation(Nout.coord.getX(), Nin.coord.getY())
						}
						//récupération des points des courbes de Béziers
						points = bezierQuad(Nin.coord, PC, Nout.coord, nbP)

						E.weight = tool.weight_curve(
							#[Nin.coord.getX(), PC.getX(), Nout.coord.getX(), Nin.coord.getY(), PC.getY(),
								Nout.coord.getY()], 0.0, 1.0, 10000.0)
					}
					
					E.getPoints().addAll(points)
					this.ListEdge.add(E)
					dict_Edges.put(key, E)
					idt = idt + 1
				}

			}
		}
	}

	//calcul des courbes de Bézier
	def bezierQuad(P1 : Point2D, PC : Point2D, P2 : Point2D, nbPoints : int) : double[] {
		var res : double[]
		var t : ArrayList<Double>
		var d : Double
		var X : Double
		var Y : Double
		var p : Point2D

		res = newDoubleArrayOfSize(2 * (nbPoints + 1))
		p = new Point2D.Double
		t = new ArrayList()
		d = 0.0
		var pas : double = 1.0d / nbPoints
		
		for (var i = 0; i <= nbPoints; i++) {
			t.add(d)
			d = d + pas

		}

		var tour : int = 0
		for (var j = 0; j < 2 * nbPoints + 2; j = j + 2) {
			X = P1.getX() * (1.0d - t.get(tour)) ** 2.0d + 2.0d * PC.getX() * t.get(tour) * (1.0d - t.get(tour)) +
				P2.getX() * (t.get(tour)) ** 2.0d
			Y = P1.getY() * (1.0d - t.get(tour)) ** 2 + 2 * PC.getY() * t.get(tour) * (1.0d - t.get(tour)) +
				P2.getY() * (t.get(tour)) ** 2

			res.set(j, X)
			res.set(j + 1, Y)
			tour += 1

		}
		
		return res
	}

		
}
