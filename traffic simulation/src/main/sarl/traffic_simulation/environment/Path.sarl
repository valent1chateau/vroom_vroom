
package traffic_simulation.environment

import org.eclipse.xtend.lib.annotations.Accessors
import java.util.*
import java.lang.Math.*


class Path {

	var openList : ArrayList<Node>
	var closeList : ArrayList<Node>
	var ghf : Map<Integer, double[]>
	var pred : Map<Integer, Integer>
	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var pathNodes : ArrayList<Node>
	@Accessors(PUBLIC_SETTER, PUBLIC_GETTER)
	var pathEdges : ArrayList<Edge>

	new() {
		openList = new ArrayList<Node>
		closeList = new ArrayList<Node>
		ghf = new Hashtable<Integer, double[]>
		pred = new Hashtable<Integer, Integer>
		pathNodes = new ArrayList<Node>
		pathEdges = new ArrayList<Edge>

	}

	def Astar(G : Graph, nStart : Node, nEnd : Node) {//implémentation de l'algorithme A^ définissant le chemin à partir d'un noeud de départ et d'un noeud d'arrivée

		var stop : boolean = false

		var ghfstart : double[] = #[0.0, 0.0, 0.0]
		ghf.put(nStart.id, ghfstart)
		pred.put(nStart.id, -1)
		openList.add(nStart)

		while (!(openList.isEmpty()) && stop == false) {
			var n : Node = bestNodeinTheList(openList)

			if (n == nEnd) {
				stop = true
			}

			for (var i = 0; i < n.neighboors.size(); i++) {
				var v : Node = n.neighboors.get(i)
				var v_g : double = cost_g(G, n, v)
				var v_h : double = heuristique(v, nEnd)
				var v_f : double = f(v_g, v_h)

				if (!openList.contains(v) && !closeList.contains(v)) {
					var ghf_v : double[] = #[v_g, v_h, v_f]
					var pred_v : Integer = n.id
					ghf.put(v.id, ghf_v)
					pred.put(v.id, pred_v)
					openList.add(v)

				} else { // il est déjà dans openList ou dans closeList
					// on compare le nouveau v_f avec l'ancien, s'il est mieux, on change les paramètres ghf et pred
					if (v_f < ghf.get(v.id).get(2)) {
						ghf.get(v.id).set(0, v_g)
						ghf.get(v.id).set(1, v_h)
						ghf.get(v.id).set(2, v_f)

						if (closeList.contains(v)) { // cas ou il est dans la liste close
							closeList.remove(v)
							openList.add(v)
						}
					}
				}
			}
			openList.remove(n)
			closeList.add(n)
		}
		ResNode(G, nStart, nEnd)
		resEdge(G)
	}

	def ResNode(G : Graph, nStart : Node, nEnd : Node) { //ajout dans la liste pathNodes les noeuds formant le chemin
		var idStart = nStart.id
		var invRes : ArrayList<Node> = new ArrayList<Node>
		invRes.add(nEnd)
		var p : int = nEnd.id
		while (p != idStart) {
			
			p = pred.get((G.getListNodes.get(p).id))
			invRes.add(G.getListNodes.get(p))

		}
		for (var i = 0; i < invRes.size(); i++) {
			pathNodes.add(invRes.get(invRes.size() - 1 - i))
		}

	}

	def resEdge(G : Graph) { //ajout dans la liste resultat pathedges les edges formant le chemin
		for (var i = 0; i < pathNodes.size() - 1; i++) {
			var key = String.valueOf(pathNodes.get(i).id) + String.valueOf(pathNodes.get(i + 1).id)
			pathEdges.add(G.dict_Edges.get(key))
		}
	}

	def bestNodeinTheList(L : ArrayList<Node>) : Node {//prend la meilleur node dans la lise
		var best = L.get(0)

		for (var i = 1; i < L.size(); i++) {
			if (isBest(best, L.get(i)) == false) {
				best = L.get(i)
			}
		}
		return best
	}

	def isBest(n1 : Node, n2 : Node) : boolean {//defini si une node est meilleur que l'autre
		var res = false
		var ghf1 : double[] = ghf.get(n1.id)
		var ghf2 : double[] = ghf.get(n2.id)

		if (ghf1.get(2) < ghf2.get(2)) {
			res = true
		}
		return res
	}

	def cost_g(G : Graph, Nin : Node, Nout : Node) : double {//cout g de l'edge
		var res : double = ghf.get(Nin.id).get(0)
		var keyEdge = String.valueOf(Nin.id) + String.valueOf(Nout.id)
		var e : Edge = G.dict_Edges.get(keyEdge)
		res = res + e.weight
		return res
	}

	
	def heuristique(n : Node, nEnd : Node) : double {//definition de l'heuristique 
		var res : double
		//distance euclidienne
		res = Math.sqrt((nEnd.coord.getX() - n.coord.getX()) ** 2 + ((nEnd.coord.getY() - n.coord.getY()) ** 2 ))
		return res
	}

	def f(g : double, h : double) : double {//somme de g + h l'heuristique
		return g + h
	}
	
	def show() {
		println(pathNodes.size())
		println(pathEdges.size())
		for (var i = 0; i < pathEdges.size();i++){
			
			println(pathEdges.get(i).getNin.id + " - " + pathEdges.get(i).getNout.id)
		}
	}

}
